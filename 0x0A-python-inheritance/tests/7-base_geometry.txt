>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
   ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
   ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
   ...
ValueError: distance must be greater than 0

>>> bg.integer_validator(None, 1)
>>> bg.integer_validator(1, 1)

>>> bg.area()
Traceback (most recent call last):
   ...
Exception: area() is not implemented

>>> dir(bg) #doctest: +NORMALIZE_WHITESPACE
['__class__', '__delattr__', '__dict__', '__dir__',
 '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
 '__gt__', '__hash__', '__init__', '__le__', '__lt__',
 '__module__', '__ne__', '__new__', '__reduce__',
 '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
 '__str__', '__subclasshook__', '__weakref__', 'area', 'integer_validator']

>>> dir(bg) == dir(BaseGeometry)
True

>>> bg = BaseGeometry(2)
Traceback (most recent call last):
   ...
TypeError: object() takes no parameters

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
	...
TypeError: bool must be an integer

>>> bg.integer_validator("float", 1.5)
Traceback (most recent call last):
	...
TypeError: float must be an integer

>>> bg.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
	...
TypeError: complex must be an integer

>>> bg.integer_validator("string", "hello")
Traceback (most recent call last):
	...
TypeError: string must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
	...
TypeError: tuple must be an integer

>>> bg.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
	...
TypeError: list must be an integer

>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
	...
TypeError: dict must be an integer

>>> bg.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
	...
TypeError: set must be an integer

>>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
	...
TypeError: frozenset must be an integer

>>> bg.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
	...
TypeError: bytes must be an integer

>>> bg.integer_validator("bytearrays", bytearray(b"bytes"))
Traceback (most recent call last):
	...
TypeError: bytearrays must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
	...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("integer")
Traceback (most recent call last):
	...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("integer", 1, 2)
Traceback (most recent call last):
	...
TypeError: integer_validator() takes 3 positional arguments but 4 were given
