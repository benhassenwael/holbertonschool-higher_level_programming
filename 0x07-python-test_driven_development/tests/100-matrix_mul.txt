>>> matrix_mul = __import__("100-matrix_mul").matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]])
[[10.5, 15.5, 18.5], [22.5, 33.5, 40.5]]

>>> matrix_mul(None, [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2], [3, 4]], None)
Traceback (most recent call last):
	...
TypeError: m_b must be a list

>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> matrix_mul([[], []], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [[]])
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
Traceback (most recent call last):
	...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, "Hello"], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [[1, "Hello"], [3, 4]])
Traceback (most recent call last):
	...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4,]])
Traceback (most recent call last):
	...
ValueError: m_a and m_b can't be multiplied

